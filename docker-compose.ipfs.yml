version: '3.8'

services:
  # IPFS Node
  ipfs:
    image: ipfs/kubo:latest
    container_name: peerai_ipfs_node
    ports:
      - "4001:4001"  # P2P port
      - "5001:5001"  # API port
      - "8080:8080"  # Gateway port
    volumes:
      - ipfs_data:/data/ipfs
      - ipfs_staging:/export
    environment:
      - IPFS_PROFILE=server
    command: daemon --migrate=true --agent-version-suffix=docker
    restart: unless-stopped
    networks:
      - peerai_network

  # IPFS Cluster (for replication)
  ipfs-cluster:
    image: ipfs/ipfs-cluster:latest
    container_name: peerai_ipfs_cluster
    ports:
      - "9094:9094"  # Cluster API
      - "9095:9095"  # Cluster proxy
    volumes:
      - cluster_data:/data/ipfs-cluster
    environment:
      - CLUSTER_PEERNAME=peerai-cluster-peer
      - CLUSTER_SECRET=your-cluster-secret-here
      - CLUSTER_IPFSHTTP_NODEMULTIADDRESS=/dns4/ipfs/tcp/5001
    depends_on:
      - ipfs
    restart: unless-stopped
    networks:
      - peerai_network

  # PeerAI Application
  peerai:
    build:
      context: .
      dockerfile: Dockerfile.peerai
    container_name: peerai_app
    ports:
      - "8000:8000"  # PeerAI API
      - "8001:8001"  # PeerAI Web UI
    volumes:
      - ./models:/app/models
      - ./sample_data:/app/sample_data
      - ./ml:/app/ml
    environment:
      - IPFS_HOST=ipfs
      - IPFS_PORT=5001
      - NODE_ID=peerai-docker-node
      - LOG_LEVEL=INFO
    depends_on:
      - ipfs
      - ipfs-cluster
    restart: unless-stopped
    networks:
      - peerai_network

  # Redis for caching and job queue
  redis:
    image: redis:7-alpine
    container_name: peerai_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - peerai_network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: peerai_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - peerai
      - ipfs
    restart: unless-stopped
    networks:
      - peerai_network

volumes:
  ipfs_data:
  ipfs_staging:
  cluster_data:
  redis_data:

networks:
  peerai_network:
    driver: bridge 